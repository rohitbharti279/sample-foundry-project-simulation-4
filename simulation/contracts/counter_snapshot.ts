// Generated by SnapshotCodeGenerator

import { ethers } from 'ethers';
import { Actor, Snapshot } from '@svylabs/ilumina';
import { CounterSnapshot } from './snapshot_interfaces';

/**
 * Takes a snapshot of Counter state
 * @param contract - ethers.Contract instance
 * @param actors - Array of actors (users) to snapshot.  Currently unused for contract-level snapshots.
 * @returns Promise returning the interface CounterSnapshot
 */
export async function takecounterContractSnapshot(contract: ethers.Contract, actors: Actor[]): Promise<CounterSnapshot> {
    if (actors.length > 0) {
        console.warn('Actors provided to takecounterContractSnapshot, but no user-specific snapshot logic is implemented.  These actors will be ignored.');
    }

    try {
        const number = await contract.number();

        const snapshot: CounterSnapshot = {
            number: BigInt(number.toString()),
        };

        return snapshot;
    } catch (error: any) {
        console.error('Error taking snapshot of Counter contract:', error);
        throw new Error(`Failed to take Counter contract snapshot: ${error.message}. Check contract address and network connection.`);
    }
}